trigger:
  branches:
    include:
      - main

pool:
  name: BuildAgents

variables:
  phpVersion: '8.2'

steps:
  - checkout: self

  # Install PHP 8.2 and required extensions
  - script: |
      sudo add-apt-repository ppa:ondrej/php -y
      sudo apt-get update
      sudo apt-get install -y php8.2 php8.2-cli php8.2-mbstring php8.2-xml php8.2-zip php8.2-bcmath php8.2-intl php8.2-curl
      sudo update-alternatives --install /usr/bin/php php /usr/bin/php8.2 100
      sudo update-alternatives --install /usr/bin/php-config php-config /usr/bin/php-config8.2 100
      sudo update-alternatives --install /usr/bin/phpize phpize /usr/bin/phpize8.2 100
      php -v
    displayName: 'Install and switch to PHP 8.2'

  # Install Composer
  - script: |
      curl -sS https://getcomposer.org/installer | php
      sudo mv composer.phar /usr/local/bin/composer
      php /usr/local/bin/composer --version
    displayName: 'Install Composer'

  # Install Composer dependencies using PHP 8.2
  - script: |
      php -v
      php /usr/local/bin/composer install --no-interaction --prefer-dist
    displayName: 'Install Composer dependencies'

  # Run PHPUnit tests
  - script: |
      ./vendor/bin/phpunit --configuration phpunit.xml
    displayName: 'Run PHPUnit tests'

  # Package app and deployment script
  - script: |
      # Create a zip file of the app excluding git and existing zip files
      zip -r myapp.zip . -x "*.git*" "*.zip"
      mv myapp.zip $(Build.ArtifactStagingDirectory)/
      # Include the deploy script
      cp deploy-Linux.sh $(Build.ArtifactStagingDirectory)/
    displayName: 'Package app and deploy script'

  # Check contents of Artifact Staging Directory
  - script: |
      ls -lh $(Build.ArtifactStagingDirectory)
    displayName: 'Check contents of Artifact Staging Directory'

  # Publish build artifacts
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'drop'
      publishLocation: 'Container'
    displayName: 'Publish build artifacts'

  # Download build artifact for deployment
  - task: DownloadPipelineArtifact@2
    inputs:
      artifactName: 'drop'
      targetPath: '$(Pipeline.Workspace)/drop'
    displayName: 'Download Build Artifact'

  # Check downloaded build artifacts
  - script: |
      ls -lh $(Pipeline.Workspace)/drop
    displayName: 'Check downloaded artifacts'

  # Upload build artifacts to the Linux VM
  - task: CopyFilesOverSSH@0
    inputs:
      sshEndpoint: 'Linux-vm-ssh'
      sourceFolder: '$(Pipeline.Workspace)/drop'
      contents: '**'
      targetFolder: '/tmp/deploy'
    displayName: 'Copy build artifacts to Linux VM'

  # Verify files on the Linux VM
  - task: SSH@0
    inputs:
      sshEndpoint: 'Linux-vm-ssh'
      runOptions: 'inline'
      inline: |
        echo "Checking contents of /tmp/deploy:"
        ls -lh /tmp/deploy
    displayName: 'Verify files on Linux VM'

  # Deploy to Linux VM using SSH
  - task: SSH@0
    inputs:
      sshEndpoint: 'Linux-vm-ssh'  # The SSH service connection name
      runOptions: 'commands'
      commands: |
        # Ensure /tmp/deploy exists
        mkdir -p /tmp/deploy
        
        # Check if myapp.zip exists, create it if not
        if [ ! -f /tmp/deploy/myapp.zip ]; then
          echo "❌ myapp.zip not found at /tmp/deploy/, creating it now..."
          
          # Create the zip file from the source directory, excluding .git and .zip files
          zip -r /tmp/deploy/myapp.zip /var/www/html/ -x "*.git*" "*.zip" || {
            echo "❌ Failed to create myapp.zip"
            exit 1
          }
        fi
        
        # Clean existing files and unzip new ones if myapp.zip exists
        if [ -f /tmp/deploy/myapp.zip ]; then
          echo "Found myapp.zip, proceeding with unzipping..."
          
          # Ensure /var/www/html exists
          if [ ! -d /var/www/html ]; then
            echo "❌ Directory /var/www/html does not exist. Exiting."
            exit 1
          fi
          
          # Remove existing files and unzip the new files
          sudo rm -rf /var/www/html/* || {
            echo "❌ Failed to remove files in /var/www/html"
            exit 1
          }
          
          unzip -o /tmp/deploy/myapp.zip -d /var/www/html/ || {
            echo "❌ Unzip failed"
            exit 1
          }
          
          echo "✅ Unzip completed successfully."
        else
          echo "❌ myapp.zip still not found at /tmp/deploy/"
          exit 1
        fi
        
        # Restart Apache after deployment
        sudo systemctl start apache2 || {
          echo "❌ Failed to restart Apache"
          exit 1
        }

        # Run a smoke test to verify deployment
        curl -I http://localhost | grep "200 OK" || {
          echo "❌ Smoke test failed"
          exit 1
        }

        echo "✅ Deployment complete."
    displayName: 'Deploy to Linux VM and restart Apache'
