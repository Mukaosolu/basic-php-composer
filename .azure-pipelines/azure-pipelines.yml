trigger:
  branches:
    include:
      - main

pool:
  name: IISAgentPool
  demands:
    - agent.os -equals Windows_NT

variables:
  phpVersion: '8.2'

steps:
  - checkout: self

  - script: |
      php -v
    displayName: 'Verify PHP Installation'

  - script: |
      echo "Installing Composer..."
      php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
      php composer-setup.php
      php -r "unlink('composer-setup.php');"
      php composer.phar --version
    displayName: 'Install Composer'

  - script: |
      echo "Installing Composer dependencies..."
      php composer.phar install --no-interaction --prefer-dist
    displayName: 'Install Composer dependencies'

  - script: |
      echo "Running PHPUnit tests..."
      ./vendor/bin/phpunit --configuration phpunit.xml
    displayName: 'Run PHPUnit tests'

  - script: |
      echo "Creating myapp directory and copying files..."
      mkdir "$(Build.ArtifactStagingDirectory)\myapp"
      xcopy * "$(Build.ArtifactStagingDirectory)\myapp" /E /I /Y | more

      echo "Zipping myapp directory..."
      powershell Compress-Archive -Path "$(Build.ArtifactStagingDirectory)\myapp\*" -DestinationPath "$(Build.ArtifactStagingDirectory)\myapp.zip"

      echo "Deleting unzipped myapp directory..."
      rmdir /s /q "$(Build.ArtifactStagingDirectory)\myapp"

      echo "Final contents of staging directory:"
      dir "$(Build.ArtifactStagingDirectory)"
    displayName: 'Package and clean up myapp'

  - script: |
      echo "Validating myapp.zip creation..."
      if exist "$(Build.ArtifactStagingDirectory)\myapp.zip" (
        echo ✅ myapp.zip exists.
      ) else (
        echo ❌ myapp.zip not found!
        dir "$(Build.ArtifactStagingDirectory)"
        exit /b 1
      )
    displayName: 'Validate myapp.zip exists'

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'drop'
      publishLocation: 'Container'
    displayName: 'Publish build artifacts'

  - task: DownloadPipelineArtifact@2
    inputs:
      artifactName: 'drop'
      targetPath: '$(Pipeline.Workspace)/app'
    displayName: 'Download Build Artifact'

  - script: |
      echo "Listing downloaded artifacts:"
      dir "$(Pipeline.Workspace)\app"
    displayName: 'Check downloaded artifacts'

  # ✅ Updated Deploy to IIS step (no deploy.bat required)
  - task: CmdLine@2
    displayName: 'Deploy to IIS'
    inputs:
      script: |
        echo "Unzipping app..."
        powershell -Command "Expand-Archive -Path '$(Pipeline.Workspace)\app\myapp.zip' -DestinationPath '$(Pipeline.Workspace)\app\unzipped' -Force"

        set targetFolder="C:\inetpub\wwwroot\Optimus Apps\MyWebApp"

        echo "Cleaning target IIS folder..."
        del /q %targetFolder%\* 2>nul
        for /D %%p in ("%targetFolder%\*") do rmdir "%%p" /s /q 2>nul

        echo "Removing .gitignore if present..."
        del "$(Pipeline.Workspace)\app\unzipped\.gitignore" 2>nul

        echo "Copying app files to IIS folder..."
        xcopy "$(Pipeline.Workspace)\app\unzipped\*" %targetFolder%\ /E /I /Y

        echo "Recycling IIS App Pool..."
        powershell -Command "try { Restart-WebAppPool -Name 'MyWebApp' -ErrorAction Stop; Write-Host '✔️ App Pool restarted successfully.' } catch { Write-Error '❌ Failed to restart App Pool'; exit 1 }"
