trigger:
- main  # Or your branch name

pool:
  vmImage: 'windows-latest'  # For the build stage

variables:
  solution: '**/*.php'
  buildDir: '$(Build.ArtifactStagingDirectory)/drop'

stages:
- stage: Build
  displayName: 'Build and Package'
  jobs:
  - job: Build
    steps:
    - task: UseDotNet@2  # If needed for dependencies; skip for pure PHP
      inputs:
        packageType: 'sdk'
        version: '6.x.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - script: |
        echo üß∞ Creating build directory...
        mkdir $(buildDir)
        echo üìÅ Copying files...
        xcopy /s /y "$(Build.SourcesDirectory)\*" "$(buildDir)\"
      displayName: 'Copy source files'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(buildDir)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(buildDir)/myapp.zip'
        replaceExistingArchive: true
      displayName: 'Create ZIP file'

    - publish: $(buildDir)
      artifact: drop
      displayName: 'Publish Artifact'

- stage: Deploy
  displayName: 'Deploy to IIS'
  dependsOn: Build
  jobs:
  - deployment: DeployToIIS
    environment: 'iis-env'  # Optional: use for environment approvals
    pool:
      name: IISAgentPool  # Your custom pool name
      demands:
        - agent.name -equals iis-agent-01  # Your specific agent

    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop

          - script: |
              echo üìÅ Running deploy.bat script...
              call "$(Pipeline.Workspace)\drop\deploy.bat"
            workingDirectory: $(Pipeline.Workspace)\drop
            displayName: 'Run deploy.bat script'
