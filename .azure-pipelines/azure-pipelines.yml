trigger:
  branches:
    include:
      - main

pool:
  name: IISAgentPool  # Use the agent pool for IIS machines

variables:
  phpVersion: '8.2'

steps:
  # Checkout the code from the repository
  - checkout: self

  # Install PHP 8.2 using Chocolatey (with admin privileges via runas)
  - script: |
      echo Running install-php.bat script with admin privileges...
      runas /user:Administrator "cmd /C $(Build.SourcesDirectory)\install-php.bat"
    displayName: 'Install PHP 8.2 using Chocolatey with admin privileges'

  # Verify PHP installation
  - script: |
      php -v
    displayName: 'Verify PHP 8.2 Installation'

  # Install Composer (Windows version)
  - script: |
      curl -sS https://getcomposer.org/installer | cmd.exe /C "php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\""
      cmd.exe /C "php composer-setup.php"
      cmd.exe /C "php -r \"unlink('composer-setup.php');\""
      php composer.phar --version
    displayName: 'Install Composer'

  # Install Composer dependencies using PHP 8.2
  - script: |
      php composer.phar install --no-interaction --prefer-dist
    displayName: 'Install Composer dependencies'

  # Run PHPUnit tests
  - script: |
      ./vendor/bin/phpunit --configuration phpunit.xml
    displayName: 'Run PHPUnit tests'

  # Package app and deployment script
  - script: |
      # Create a zip file of the app excluding git and existing zip files
      powershell Compress-Archive -Path * -Exclude *.git*,*.zip -DestinationPath $(Build.ArtifactStagingDirectory)\myapp.zip
      # Include the deploy script
      copy deploy.bat $(Build.ArtifactStagingDirectory)\deploy.bat
    displayName: 'Package app and deploy script'

  # Check contents of Artifact Staging Directory
  - script: |
      dir $(Build.ArtifactStagingDirectory)
    displayName: 'Check contents of Artifact Staging Directory'

  # Publish build artifacts
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'drop'
      publishLocation: 'Container'
    displayName: 'Publish build artifacts'

  # Download build artifact for deployment
  - task: DownloadPipelineArtifact@2
    inputs:
      artifactName: 'drop'
      targetPath: '$(Pipeline.Workspace)/drop'
    displayName: 'Download Build Artifact'

  # Check downloaded build artifacts
  - script: |
      dir $(Pipeline.Workspace)/drop
    displayName: 'Check downloaded artifacts'

  # Upload build artifacts to the IIS server
  - task: CopyFilesOverSSH@0
    inputs:
      sshEndpoint: 'IIS-vm-ssh'  # This should be your Windows IIS endpoint
      sourceFolder: '$(Pipeline.Workspace)/drop'
      contents: '**'
      targetFolder: 'C:\\inetpub\\wwwroot\\MyWebApp'  # IIS root directory
    displayName: 'Copy build artifacts to IIS'

  # Verify files on the IIS server
  - task: SSH@0
    inputs:
      sshEndpoint: 'IIS-vm-ssh'
      runOptions: 'inline'
      inline: |
        echo "Checking contents of C:\\inetpub\\wwwroot\\MyWebApp:"
        dir C:\\inetpub\\wwwroot\\MyWebApp
    displayName: 'Verify files on IIS server'

  # Run the deploy.bat script to deploy the app
  - script: |
      echo Running deploy.bat...
      call $(Pipeline.Workspace)/drop/deploy.bat
    displayName: 'Run deployment script'
