trigger:
  branches:
    include:
      - main

pool:
  name: IISAgentPool  # Use the agent pool for IIS machines

variables:
  phpVersion: '8.2'

steps:
  - checkout: self

  # Install PHP 8.2 and required extensions (for Windows IIS)
  - script: |
      choco install php --version 8.2
      choco install php-pear
      php -v
    displayName: 'Install PHP 8.2 on Windows'

  # Install Composer (Windows version)
  - script: |
      REM Download Composer installer
      curl -sS https://getcomposer.org/installer -o composer-setup.php

      REM Install Composer
      php composer-setup.php
      php -r "unlink('composer-setup.php');"  # Clean up installer

      REM Verify Composer installation
      php composer.phar --version
    displayName: 'Install Composer'

  # Install Composer dependencies using PHP 8.2
  - script: |
      php composer.phar install --no-interaction --prefer-dist
    displayName: 'Install Composer dependencies'

  # Run PHPUnit tests
  - script: |
      ./vendor/bin/phpunit --configuration phpunit.xml
    displayName: 'Run PHPUnit tests'

  # Package app and deployment script
  - script: |
      REM Create a zip file of the app excluding git and existing zip files
      zip -r myapp.zip . -x "*.git*" "*.zip"
      mv myapp.zip $(Build.ArtifactStagingDirectory)/

      REM Include the deploy script
      cp deploy-Windows.bat $(Build.ArtifactStagingDirectory)/
    displayName: 'Package app and deploy script'

  # Check contents of Artifact Staging Directory
  - script: |
      dir $(Build.ArtifactStagingDirectory)
    displayName: 'Check contents of Artifact Staging Directory'

  # Publish build artifacts
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'drop'
      publishLocation: 'Container'
    displayName: 'Publish build artifacts'

  # Download build artifact for deployment
  - task: DownloadPipelineArtifact@2
    inputs:
      artifactName: 'drop'
      targetPath: '$(Pipeline.Workspace)/drop'
    displayName: 'Download Build Artifact'

  # Check downloaded build artifacts
  - script: |
      dir $(Pipeline.Workspace)/drop
    displayName: 'Check downloaded artifacts'

  # Upload build artifacts to the IIS server
  - task: CopyFilesOverSSH@0
    inputs:
      sshEndpoint: 'IIS-vm-ssh'  # This should be your Windows IIS endpoint
      sourceFolder: '$(Pipeline.Workspace)/drop'
      contents: '**'
      targetFolder: 'C:\\inetpub\\wwwroot\\MyWebApp'  # IIS root directory
    displayName: 'Copy build artifacts to IIS'

  # Verify files on the IIS server
  - task: SSH@0
    inputs:
      sshEndpoint: 'IIS-vm-ssh'
      runOptions: 'inline'
      inline: |
        echo "Checking contents of C:\\inetpub\\wwwroot\\MyWebApp:"
        dir C:\\inetpub\\wwwroot\\MyWebApp
    displayName: 'Verify files on IIS server'

  # Batch script for stopping IIS, deploying, and restarting IIS
  - script: |
      echo Stopping IIS...
      iisreset /stop

      echo Checking contents of C:\inetpub\wwwroot\MyWebApp:
      dir C:\inetpub\wwwroot\MyWebApp

      echo Deploying the app...
      if exist "C:\inetpub\wwwroot\MyWebApp\myapp.zip" (
        echo ✅ Found myapp.zip, proceeding with deployment...
        "C:\Program Files\7-Zip\7z.exe" x "C:\inetpub\wwwroot\MyWebApp\myapp.zip" -oC:\inetpub\wwwroot\MyWebApp
      ) else (
        echo ❌ myapp.zip not found
        exit /b 1
      )

      echo Starting IIS...
      iisreset /start

      echo Running smoke test...
      curl -s -o nul -w "%{http_code}" http://localhost | findstr /C:"200" || (
        echo ❌ Smoke test failed
        exit /b 1
      )

      echo ✅ Deployment complete.
    displayName: 'Deploy to IIS and restart services'
