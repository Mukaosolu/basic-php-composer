trigger:
  branches:
    include:
      - main

pool:
  name: IISAgentPool
  demands:
    - agent.os -equals Windows_NT

variables:
  phpVersion: '8.2'

steps:
  - checkout: self

  - script: |
      php -v
    displayName: 'Verify PHP Installation'

  - script: |
      echo "Installing Composer..."
      php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
      php composer-setup.php
      php -r "unlink('composer-setup.php');"
      php composer.phar --version
    displayName: 'Install Composer'

  - script: |
      echo "Installing Composer dependencies..."
      php composer.phar install --no-interaction --prefer-dist
    displayName: 'Install Composer dependencies'

  - script: |
      echo "Running PHPUnit tests..."
      ./vendor/bin/phpunit --configuration phpunit.xml
    displayName: 'Run PHPUnit tests'

  # ‚úÖ Package app into myapp directory and zip it
  - script: |
      echo "Preparing application package..."

      mkdir $(Build.ArtifactStagingDirectory)\myapp

      xcopy * $(Build.ArtifactStagingDirectory)\myapp /E /I /Y /EXCLUDE:.git,.zip

      echo "Zipping myapp..."
      powershell Compress-Archive -Path "$(Build.ArtifactStagingDirectory)\myapp\*" -DestinationPath "$(Build.ArtifactStagingDirectory)\myapp.zip"

      echo "Copying deploy.bat..."
      copy deploy.bat $(Build.ArtifactStagingDirectory)\deploy.bat
    displayName: 'Package myapp and deploy script'

  - script: |
      echo "Contents of Artifact Staging Directory:"
      dir "$(Build.ArtifactStagingDirectory)"
    displayName: 'Check artifact staging directory'

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'drop'
      publishLocation: 'Container'
    displayName: 'Publish build artifacts'

  - task: DownloadPipelineArtifact@2
    inputs:
      artifactName: 'drop'
      targetPath: '$(Pipeline.Workspace)/drop'
    displayName: 'Download Build Artifact'

  - script: |
      echo "Downloaded artifacts:"
      dir "$(Pipeline.Workspace)\drop"
    displayName: 'Check downloaded artifacts'

  - task: CmdLine@2
    displayName: 'Run deploy.bat script'
    inputs:
      script: |
        echo üìÅ Running deploy.bat script...
        cd "$(Pipeline.Workspace)\drop"

        REM Validate files
        if exist "deploy.bat" (
            echo ‚úÖ deploy.bat found.
        ) else (
            echo ‚ùå deploy.bat not found.
            exit /b 1
        )

        if exist "myapp.zip" (
            echo ‚úÖ myapp.zip found.
        ) else (
            echo ‚ùå myapp.zip not found.
            exit /b 1
        )

        call deploy.bat
